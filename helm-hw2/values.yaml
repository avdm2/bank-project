replicaCount: 2

image:
  repository: avdm2/tinkoff_hw3
  pullPolicy: IfNotPresent
  tag: latest

extraEnv:
  - name: DB_HOST
    value: "localhost"
  - name: DB_PORT
    value: "5432"
  - name: DB_NAME
    value: "db_name"
  - name: DB_USER
    value: "postgres"
  - name: DB_PASSWORD
    value: "postgres"
  - name: CONVERTER_URL
    value: "http//localhost:8080/convert"
  - name: RATES_URL
    value: "http://localhost:8080/rates"
  - name: KEYCLOAK_URL
    value: "http://smth:1234"
  - name: KEYCLOAK_REALM
    value: "keycloak_realm"
  - name: CLIENT_ID
    value: "client_id"
  - name: CLIENT_SECRET
    value: "client_secret"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}

securityContext: {}

service:
  type: NodePort
  port: 8080
  targetPort: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

resources: {}

livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 60
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 30
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 60
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 30

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 90
  targetMemoryUtilizationPercentage: 90

volumes: []

volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}
